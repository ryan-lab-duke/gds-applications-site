Traceback (most recent call last):
  File "/opt/miniconda3/envs/book/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/miniconda3/envs/book/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/miniconda3/envs/book/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/miniconda3/envs/book/lib/python3.12/asyncio/base_events.py", line 686, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/miniconda3/envs/book/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/miniconda3/envs/book/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/miniconda3/envs/book/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Download data
wa_plumbing = products.ACS(2019).from_state('Washington', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
or_plumbing = products.ACS(2019).from_state('Oregon', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
ca_plumbing = products.ACS(2019).from_state('California', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
az_plumbing = products.ACS(2019).from_state('Arizona', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
nm_plumbing = products.ACS(2019).from_state('New Mexico', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
id_plumbing = products.ACS(2019).from_state('Idaho', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
az_plumbing = products.ACS(2019).from_state('Arizona', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
ut_plumbing = products.ACS(2019).from_state('Utah', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
id_plumbing = products.ACS(2019).from_state('Idaho', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
nv_plumbing = products.ACS(2019).from_state('Nevada', 
                                          level='county',
                                          variables=['B25047_001E', 'B25047_002E', 'B25047_003E'])
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[4], line 2[0m
[1;32m      1[0m [38;5;66;03m# Download data[39;00m
[0;32m----> 2[0m wa_plumbing [38;5;241m=[39m [43mproducts[49m[38;5;241;43m.[39;49m[43mACS[49m[43m([49m[38;5;241;43m2019[39;49m[43m)[49m[38;5;241;43m.[39;49m[43mfrom_state[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mWashington[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m
[1;32m      3[0m [43m                                          [49m[43mlevel[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mcounty[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m      4[0m [43m                                          [49m[43mvariables[49m[38;5;241;43m=[39;49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mB25047_001E[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mB25047_002E[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mB25047_003E[39;49m[38;5;124;43m'[39;49m[43m][49m[43m)[49m
[1;32m      5[0m or_plumbing [38;5;241m=[39m products[38;5;241m.[39mACS([38;5;241m2019[39m)[38;5;241m.[39mfrom_state([38;5;124m'[39m[38;5;124mOregon[39m[38;5;124m'[39m, 
[1;32m      6[0m                                           level[38;5;241m=[39m[38;5;124m'[39m[38;5;124mcounty[39m[38;5;124m'[39m,
[1;32m      7[0m                                           variables[38;5;241m=[39m[[38;5;124m'[39m[38;5;124mB25047_001E[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mB25047_002E[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mB25047_003E[39m[38;5;124m'[39m])
[1;32m      8[0m ca_plumbing [38;5;241m=[39m products[38;5;241m.[39mACS([38;5;241m2019[39m)[38;5;241m.[39mfrom_state([38;5;124m'[39m[38;5;124mCalifornia[39m[38;5;124m'[39m, 
[1;32m      9[0m                                           level[38;5;241m=[39m[38;5;124m'[39m[38;5;124mcounty[39m[38;5;124m'[39m,
[1;32m     10[0m                                           variables[38;5;241m=[39m[[38;5;124m'[39m[38;5;124mB25047_001E[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mB25047_002E[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mB25047_003E[39m[38;5;124m'[39m])

File [0;32m/opt/miniconda3/envs/book/lib/python3.12/site-packages/cenpy/products.py:767[0m, in [0;36mACS.from_state[0;34m(self, state, variables, level, **kwargs)[0m
[1;32m    766[0m [38;5;28;01mdef[39;00m [38;5;21mfrom_state[39m([38;5;28mself[39m, state, variables[38;5;241m=[39m[38;5;28;01mNone[39;00m, level[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtract[39m[38;5;124m"[39m, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[0;32m--> 767[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_from_name[49m[43m([49m[43mstate[49m[43m,[49m[43m [49m[43mvariables[49m[43m,[49m[43m [49m[43mlevel[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mStates[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/opt/miniconda3/envs/book/lib/python3.12/site-packages/cenpy/products.py:723[0m, in [0;36mACS._from_name[0;34m(self, place, variables, level, layername, return_geometry, cache_name, strict_within, return_bounds, geometry_precision)[0m
[1;32m    720[0m variables[38;5;241m.[39mappend([38;5;124m"[39m[38;5;124mGEO_ID[39m[38;5;124m"[39m)
[1;32m    722[0m caller [38;5;241m=[39m [38;5;28msuper[39m(ACS, [38;5;28mself[39m)[38;5;241m.[39m_from_name
[0;32m--> 723[0m geoms, variables, [38;5;241m*[39mrest [38;5;241m=[39m [43mcaller[49m[43m([49m
[1;32m    724[0m [43m    [49m[43mplace[49m[43m,[49m
[1;32m    725[0m [43m    [49m[43mvariables[49m[43m,[49m
[1;32m    726[0m [43m    [49m[43mlevel[49m[43m,[49m
[1;32m    727[0m [43m    [49m[43mlayername[49m[43m,[49m
[1;32m    728[0m [43m    [49m[43mreturn_geometry[49m[38;5;241;43m=[39;49m[43mreturn_geometry[49m[43m,[49m
[1;32m    729[0m [43m    [49m[43mcache_name[49m[38;5;241;43m=[39;49m[43mcache_name[49m[43m,[49m
[1;32m    730[0m [43m    [49m[43mstrict_within[49m[38;5;241;43m=[39;49m[43mstrict_within[49m[43m,[49m
[1;32m    731[0m [43m    [49m[43mreturn_bounds[49m[38;5;241;43m=[39;49m[43mreturn_bounds[49m[43m,[49m
[1;32m    732[0m [43m    [49m[43mgeometry_precision[49m[38;5;241;43m=[39;49m[43mgeometry_precision[49m[43m,[49m
[1;32m    733[0m [43m[49m[43m)[49m
[1;32m    734[0m variables[[38;5;124m"[39m[38;5;124mGEOID[39m[38;5;124m"[39m] [38;5;241m=[39m variables[38;5;241m.[39mGEO_ID[38;5;241m.[39mstr[38;5;241m.[39msplit([38;5;124m"[39m[38;5;124mUS[39m[38;5;124m"[39m)[38;5;241m.[39mapply([38;5;28;01mlambda[39;00m x: x[[38;5;241m1[39m])
[1;32m    735[0m return_table [38;5;241m=[39m geoms[[[38;5;124m"[39m[38;5;124mGEOID[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mgeometry[39m[38;5;124m"[39m]][38;5;241m.[39mmerge(
[1;32m    736[0m     variables[38;5;241m.[39mdrop([38;5;124m"[39m[38;5;124mGEO_ID[39m[38;5;124m"[39m, axis[38;5;241m=[39m[38;5;241m1[39m), how[38;5;241m=[39m[38;5;124m"[39m[38;5;124mleft[39m[38;5;124m"[39m, on[38;5;241m=[39m[38;5;124m"[39m[38;5;124mGEOID[39m[38;5;124m"[39m
[1;32m    737[0m )

File [0;32m/opt/miniconda3/envs/book/lib/python3.12/site-packages/cenpy/products.py:389[0m, in [0;36m_Product._from_name[0;34m(self, place, variables, level, layername, strict_within, return_bounds, geometry_precision, cache_name, replace_missing, return_geometry)[0m
[1;32m    380[0m geoms, data [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_from_bbox(
[1;32m    381[0m     env[38;5;241m.[39mto_crs(epsg[38;5;241m=[39m[38;5;241m4326[39m)[38;5;241m.[39mtotal_bounds,
[1;32m    382[0m     variables[38;5;241m=[39mvariables,
[0;32m   (...)[0m
[1;32m    386[0m     replace_missing[38;5;241m=[39mreplace_missing,
[1;32m    387[0m )
[1;32m    388[0m [38;5;28;01mif[39;00m strict_within:
[0;32m--> 389[0m     geoms [38;5;241m=[39m [43mgeopandas[49m[38;5;241;43m.[39;49m[43msjoin[49m[43m([49m[43mgeoms[49m[43m,[49m[43m [49m[43menv[49m[43m[[49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mgeometry[39;49m[38;5;124;43m"[39;49m[43m][49m[43m][49m[43m,[49m[43m [49m[43mhow[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43minner[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mop[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwithin[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m    390[0m [38;5;28;01mif[39;00m return_bounds:
[1;32m    391[0m     [38;5;28;01mreturn[39;00m geoms, data, env

File [0;32m/opt/miniconda3/envs/book/lib/python3.12/site-packages/geopandas/tools/sjoin.py:110[0m, in [0;36msjoin[0;34m(left_df, right_df, how, predicate, lsuffix, rsuffix, distance, on_attribute, **kwargs)[0m
[1;32m    108[0m [38;5;28;01mif[39;00m kwargs:
[1;32m    109[0m     first [38;5;241m=[39m [38;5;28mnext[39m([38;5;28miter[39m(kwargs[38;5;241m.[39mkeys()))
[0;32m--> 110[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124msjoin() got an unexpected keyword argument [39m[38;5;124m'[39m[38;5;132;01m{[39;00mfirst[38;5;132;01m}[39;00m[38;5;124m'[39m[38;5;124m"[39m)
[1;32m    112[0m on_attribute [38;5;241m=[39m _maybe_make_list(on_attribute)
[1;32m    114[0m _basic_checks(left_df, right_df, how, lsuffix, rsuffix, on_attribute[38;5;241m=[39mon_attribute),

[0;31mTypeError[0m: sjoin() got an unexpected keyword argument 'op'

